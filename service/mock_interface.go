// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	entities "user-curd/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockUserServiceHandler is a mock of UserServiceHandler interface.
type MockUserServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceHandlerMockRecorder
}

// MockUserServiceHandlerMockRecorder is the mock recorder for MockUserServiceHandler.
type MockUserServiceHandlerMockRecorder struct {
	mock *MockUserServiceHandler
}

// NewMockUserServiceHandler creates a new mock instance.
func NewMockUserServiceHandler(ctrl *gomock.Controller) *MockUserServiceHandler {
	mock := &MockUserServiceHandler{ctrl: ctrl}
	mock.recorder = &MockUserServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceHandler) EXPECT() *MockUserServiceHandlerMockRecorder {
	return m.recorder
}

// CreateUserService mocks base method.
func (m *MockUserServiceHandler) CreateUserService(user entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserService", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserService indicates an expected call of CreateUserService.
func (mr *MockUserServiceHandlerMockRecorder) CreateUserService(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserService", reflect.TypeOf((*MockUserServiceHandler)(nil).CreateUserService), user)
}

// DeleteUserService mocks base method.
func (m *MockUserServiceHandler) DeleteUserService(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserService indicates an expected call of DeleteUserService.
func (mr *MockUserServiceHandlerMockRecorder) DeleteUserService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserService", reflect.TypeOf((*MockUserServiceHandler)(nil).DeleteUserService), arg0)
}

// GetAllUsersService mocks base method.
func (m *MockUserServiceHandler) GetAllUsersService() ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersService")
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersService indicates an expected call of GetAllUsersService.
func (mr *MockUserServiceHandlerMockRecorder) GetAllUsersService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersService", reflect.TypeOf((*MockUserServiceHandler)(nil).GetAllUsersService))
}

// GetUserByIdService mocks base method.
func (m *MockUserServiceHandler) GetUserByIdService(arg0 interface{}) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIdService", arg0)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIdService indicates an expected call of GetUserByIdService.
func (mr *MockUserServiceHandlerMockRecorder) GetUserByIdService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIdService", reflect.TypeOf((*MockUserServiceHandler)(nil).GetUserByIdService), arg0)
}

// UpdateUserService mocks base method.
func (m *MockUserServiceHandler) UpdateUserService(user entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserService", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserService indicates an expected call of UpdateUserService.
func (mr *MockUserServiceHandlerMockRecorder) UpdateUserService(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserService", reflect.TypeOf((*MockUserServiceHandler)(nil).UpdateUserService), user)
}
