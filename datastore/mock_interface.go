// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package datastore is a generated GoMock package.
package datastore

import (
	reflect "reflect"
	entities "user-curd/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockUserStoresHandler is a mock of UserStoresHandler interface.
type MockUserStoresHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoresHandlerMockRecorder
}

// MockUserStoresHandlerMockRecorder is the mock recorder for MockUserStoresHandler.
type MockUserStoresHandlerMockRecorder struct {
	mock *MockUserStoresHandler
}

// NewMockUserStoresHandler creates a new mock instance.
func NewMockUserStoresHandler(ctrl *gomock.Controller) *MockUserStoresHandler {
	mock := &MockUserStoresHandler{ctrl: ctrl}
	mock.recorder = &MockUserStoresHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStoresHandler) EXPECT() *MockUserStoresHandlerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserStoresHandler) CreateUser(arg0 entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserStoresHandlerMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserStoresHandler)(nil).CreateUser), arg0)
}

// DeleteUser mocks base method.
func (m *MockUserStoresHandler) DeleteUser(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserStoresHandlerMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserStoresHandler)(nil).DeleteUser), arg0)
}

// GetAllUsers mocks base method.
func (m *MockUserStoresHandler) GetAllUsers() ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserStoresHandlerMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserStoresHandler)(nil).GetAllUsers))
}

// GetUserById mocks base method.
func (m *MockUserStoresHandler) GetUserById(arg0 interface{}) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserStoresHandlerMockRecorder) GetUserById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserStoresHandler)(nil).GetUserById), arg0)
}

// UpdateUser mocks base method.
func (m *MockUserStoresHandler) UpdateUser(arg0 entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserStoresHandlerMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserStoresHandler)(nil).UpdateUser), arg0)
}
